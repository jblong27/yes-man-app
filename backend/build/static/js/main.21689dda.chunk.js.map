{"version":3,"sources":["components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Questionnaire.js","components/Result.js","api/questionnaireQuestions.js","stores/UserStore.js","components/InputField.js","components/SubmitButton.js","components/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","className","content","QuestionCount","counter","total","AnswerOption","type","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","classNam","htmlFor","answerContent","Questionnaire","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","questionId","questionTotal","question","answerOptions","map","key","Result","questionnaireQuestions","answers","extendObservable","this","loading","isLoggedIn","username","InputField","placeholder","e","target","React","Component","SubmitButton","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","answersCount","shuffledAnswerOptions","shuffleArray","handleanswerSelected","bind","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","event","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","answersCountKeys","Object","keys","answersCountValues","maxAnswersCount","max","apply","filter","questionnaireResult","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.21689dda.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Question(props) {\r\n  return (\r\n    <h2 className=\"question\">{props.content}</h2>\r\n  );\r\n}\r\n\r\nQuestion.propTypes = {\r\n  content: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Question;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction QuestionCount(props) {\r\n  return (\r\n    <div className='questionCount'>\r\n      Question <span>{props.counter}</span> of <span>{props.total}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nQuestionCount.propTypes = {\r\n  counter: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired\r\n};\r\n\r\nexport default QuestionCount;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AnswerOption(props) {\r\n  return (\r\n    <li className=\"answerOption\">\r\n      <input\r\n        type=\"radio\"\r\n        className=\"radioCustomButton\"\r\n        name=\"radioGroup\"\r\n        checked={props.answerType === props.answer}\r\n        id={props.answerType}\r\n        value={props.answerType}\r\n        disabled={props.answer}\r\n        onChange={props.onAnswerSelected}\r\n      />\r\n      <label classNam=\"radioCustomLabel\" htmlFor={props.answerType}>\r\n        {props.answerContent}\r\n      </label>\r\n    </li>\r\n  );\r\n}\r\n\r\nAnswerOption.propTypes = {\r\n  answerType: PropTypes.string.isRequired,\r\n  answerContent: PropTypes.string.isRequired,\r\n  answer: PropTypes.string.isRequired,\r\n  onAnswerSelected: PropTypes.string.isRequired\r\n};\r\n\r\nexport default AnswerOption;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Question from '../components/Question';\r\nimport QuestionCount from '../components/QuestionCount';\r\nimport AnswerOption from '../components/AnswerOption';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\n\r\nfunction Questionnaire(props) {\r\n  function renderAnswerOptions(key) {\r\n    return (\r\n      <AnswerOption\r\n        key={key.content}\r\n        answerContent={key.content}\r\n        answerType={key.type}\r\n        answer={props.answer}\r\n        questionId={props.questionId}\r\n        onAnswerSelected={props.onAnswerSelected}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    // wrap the questionnaire element in the CSSTransitionGroup element to animate it\r\n    <CSSTransitionGroup\r\n      className=\"container\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n    >\r\n      <div className=\"quiz\">\r\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\r\n        <Question content={props.question} />\r\n        <ul className=\"answerOptions\">\r\n          {props.answerOptions.map(renderAnswerOptions)}\r\n        </ul>\r\n      </div>\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nQuestionnaire.propTypes = {\r\n  answer: PropTypes.string.isRequired,\r\n  answerOptions: PropTypes.array.isRequired,\r\n  counter: PropTypes.number.isRequired,\r\n  question: PropTypes.string.isRequired,\r\n  questionId: PropTypes.number.isRequired,\r\n  questionTotal: PropTypes.number.isRequired,\r\n  onAnswerSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Questionnaire;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\n\r\n\r\nfunction Result(props) {\r\n  return (\r\n    <CSSTransitionGroup\r\n      className=\"container result\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n      >  \r\n        <div className=\"result\">\r\n          Here's what we think you should do:\r\n        </div>\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nResult.propTypes = {\r\n  questionnaireResult: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Result;","var questionnaireQuestions = [\r\n  {\r\n    question: \"Would you rather stay inside or go outside today?\",\r\n    answers: [\r\n      {\r\n        type: \"inside\",\r\n        content: \"Inside!\"\r\n      },\r\n      {\r\n        type: \"outside\",\r\n        content: \"Outside!\"\r\n        }\r\n    ]\r\n  },\r\n  {\r\n    question: \"Are you flying solo or feeling social?\",\r\n    answers: [\r\n      {\r\n        type: \"solo\",\r\n        content: \"Solo, please.\"\r\n      },\r\n      {\r\n        type: \"social\",\r\n        content: \"Feeling social today.\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    question: \"Do you want to move your body, or just chill?\",\r\n    answers: [\r\n      {\r\n        type: \"fitness\",\r\n        content: \"Yeah, let's get moving!\"\r\n      },\r\n      {\r\n        type: \"leisure\",\r\n        content: \"I wanna chill.\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    question: \"Are you in the mood to learn something new?\",\r\n    answers: [\r\n      {\r\n        type: \"learning\",\r\n        content: \"Sure!\"\r\n      },\r\n      {\r\n        type: \"entertainment\",\r\n        content: \"Nope.\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    question: \"How do you feel about spending money?\",\r\n    answers: [\r\n      {\r\n        type: \"customer\",\r\n        content: \"I don't mind spending a lil' sum'sum'\"\r\n      },\r\n      {\r\n        type: \"broke\",\r\n        content: \"Money, what money?\"\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default questionnaireQuestions;","import { extendObservable } from 'mobx';\r\n\r\n// UserStore\r\n\r\nclass UserStore {\r\n  constructor() {\r\n    extendObservable(this, {\r\n\r\n      loading: true,\r\n      isLoggedIn: false,\r\n      username: ''\r\n\r\n    })\r\n  }\r\n}\r\n\r\nexport default new UserStore();","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"inputField\">\r\n        <input\r\n          className=\"input\"\r\n          type={this.props.type}\r\n          placeholder={this.props.placeholder}\r\n          value={this.props.value}\r\n          onChange={ (e) => this.props.onChange(e.target.value) }\r\n        />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputField;","import React from 'react';\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"submitButton\">\r\n\r\n        <button\r\n          className='btn'\r\n          disabled={this.props.disabled}\r\n          onClick={ () => this.props.onClick() }\r\n        >\r\n          {this.props.text}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmitButton;","import React from 'react';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport UserStore from '../stores/UserStore';\r\n\r\nclass LoginForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        username: '',\r\n        password: '',\r\n        buttonDisabled: false\r\n      }\r\n  }\r\n\r\n    setInputValue(property, val) {\r\n      val = val.trim();\r\n      if (val.length > 24) {\r\n        return;\r\n      }\r\n      this.setState({\r\n        [property]: val\r\n      })\r\n    }\r\n\r\n    resetForm() {\r\n      this.setState({\r\n        username: '',\r\n        password: '',\r\n        buttonDisabled: false\r\n      })\r\n    }\r\n\r\n    async doLogin() {\r\n      \r\n      if (!this.state.username) {\r\n        return;\r\n      }\r\n      if (!this.state.password) {\r\n        return;\r\n      }\r\n      this.setState({\r\n        buttonDisabled: true\r\n      })\r\n\r\n      try {\r\n        \r\n        let res = await fetch('/login', {\r\n          method: 'post',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            username: this.state.username,\r\n            password: this.state.password\r\n          })\r\n        });\r\n\r\n        let result = await res.json();\r\n        if (result && result.success) {\r\n          UserStore.isLoggedIn = true;\r\n          UserStore.username = result.username;\r\n        }\r\n        else if (result && result.success == false) {\r\n          this.resetForm();\r\n          alert(result.msg);\r\n        }\r\n      }\r\n      \r\n      catch(err) {\r\n        console.log(err);\r\n        this.resetForm();\r\n      }\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"loginForm\">\r\n        \r\n            Log in\r\n            <InputField\r\n              type='text'\r\n              placeholder='Username'\r\n              value={this.state.username ? this.state.username : ''}\r\n              onChange={ (val) => this.setInputValue('username', val) }\r\n            />\r\n\r\n            <InputField\r\n              type='text'\r\n              placeholder='Password'\r\n              value={this.state.password ? this.state.password : ''}\r\n              onChange={ (val) => this.setInputValue('password', val) }\r\n            />\r\n\r\n            <SubmitButton\r\n              text='Login'\r\n              disabled={this.state.buttonDisabled}\r\n              onClick={ () => this.doLogin() }\r\n            />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport Questionnaire from './components/Questionnaire';\r\nimport Result from './components/Result';\r\nimport questionnaireQuestions from './api/questionnaireQuestions';\r\nimport UserStore from './stores/UserStore';\r\nimport LoginForm from './components/LoginForm';\r\nimport SubmitButton from './components/SubmitButton';\r\nimport  './stylesheets/App.css';\r\nimport './api/questionnaireQuestions';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      counter: 0,\r\n      questionId: 1,\r\n      question: '',\r\n      answerOptions: [],\r\n      answer: '',\r\n      answersCount: {},\r\n      result: ''\r\n    };\r\n  }\r\n  \r\n  async componentDidMount() {\r\n    try {\r\n      let res = await fetch('/isLoggedIn', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      let result = await res.json();\r\n\r\n      if (result && result.success) {\r\n        UserStore.loading = false;\r\n        UserStore.isLoggedIn = true;\r\n        UserStore.username = result.username;\r\n      }\r\n\r\n      else {\r\n        UserStore.loading = false;\r\n        UserStore.isLoggedIn = false;\r\n      }\r\n    }\r\n    catch(err) {\r\n      UserStore.loading = false;\r\n      UserStore.isLoggedIn = false;\r\n    }\r\n  \r\n    const shuffledAnswerOptions = questionnaireQuestions.map((question) => this.shuffleArray(question.answers));\r\n\r\n    this.setState({\r\n      question: questionnaireQuestions[0].question,\r\n      answerOptions: shuffledAnswerOptions[0]\r\n    });\r\n    this.handleanswerSelected = this.handleanswerSelected.bind(this);\r\n  }\r\n  async doLogout() {\r\n    try {\r\n      let res = await fetch('/logout', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-type': 'application/json'\r\n        }\r\n      });\r\n      let result = await res.json();\r\n\r\n      if (result && result.success) {\r\n        UserStore.isLoggedIn = false;\r\n        UserStore.username = '';\r\n      }\r\n    }\r\n    catch(err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  // function to shuffle the array of answers just to spice things up\r\n  shuffleArray(array) {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    while (0 !== currentIndex) {\r\n\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  handleanswerSelected(event) {\r\n    this.setUserAnswer(event.currentTarget.value);\r\n    if (this.state.questionId < questionnaireQuestions.length) {\r\n      setTimeout(() => this.setNextQuestion(), 300);\r\n    } else {\r\n      setTimeout(() => this.setResults(this.getResults()), 300);\r\n    }\r\n  }\r\n\r\n  setUserAnswer(answer) {\r\n    this.setState((state) => ({\r\n      answersCount: {\r\n        ...state.answersCount,\r\n        [answer]: (state.answersCount[answer] || 0) + 1\r\n      },\r\n      answer: answer\r\n    }));\r\n  }\r\n\r\n  setNextQuestion() {\r\n    const counter = this.state.counter + 1;\r\n    const questionId = this.state.questionId + 1;\r\n\r\n    this.setState({\r\n      counter: counter,\r\n      questionId: questionId,\r\n      question: questionnaireQuestions[counter].question,\r\n      answerOptions: questionnaireQuestions[counter].answers,\r\n      answer: ''\r\n    });\r\n  }\r\n// this function can be used to find the most answers with a certain tag, then we could base our result\r\n// on the final page off of that. \r\n  getResults() {\r\n    const answersCount = this.state.answersCount;\r\n    const answersCountKeys = Object.keys(answersCount);\r\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\r\n    const maxAnswersCount = Math.max.apply(null, answersCountValues);\r\n\r\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswersCount);\r\n  }\r\n\r\n  setResults (result) {\r\n    if (result.length === 1) {\r\n      this.setState({ result: result[0] });\r\n    } else {\r\n      this.setState({ result: 'Undetermined' })\r\n    }\r\n  }\r\n\r\n  renderQuestionnaire() {\r\n    return (\r\n      <Questionnaire\r\n        answer={this.state.answer}\r\n        answerOptions={this.state.answerOptions}\r\n        questionId={this.state.questionId}\r\n        question={this.state.question}\r\n        questionTotal={questionnaireQuestions.length}\r\n        onAnswerSelected={this.handleanswerSelected}\r\n       />\r\n    );\r\n  }\r\n\r\n  renderResult() {\r\n    return <Result questionnaireResult={this.state.result} />;\r\n  }\r\n  render() {\r\n    if (UserStore.loading) {\r\n      return (\r\n        <div className=\"app\">\r\n          <div className=\"container\">\r\n            Loading, please wait..\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else {\r\n      if (UserStore.isLoggedIn) {\r\n        return (\r\n          <div className=\"app\">\r\n            <div className=\"container\">\r\n              Welcome {UserStore.username}\r\n\r\n              <SubmitButton\r\n                text={'Log out'}\r\n                disabled={false}\r\n                onClick={ () => this.doLogout() }\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div className=\"app\">\r\n          <div className=\"container\">\r\n              \r\n            <LoginForm />\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n  \r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <h2>Yes Man! Questionnaire</h2>\r\n        </div>\r\n        {this.state.result ? this.renderResult() : this.renderQuestionnaire()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './stylesheets/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}